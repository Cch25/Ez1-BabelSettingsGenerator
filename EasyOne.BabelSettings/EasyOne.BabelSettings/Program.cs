using EasyOne.BabelSettings.Models;
using Generator;
using Microsoft.Extensions.Configuration;
using System;
using System.Reflection;

namespace EasyOne.BabelSettings
{
    class Program
    {
        static void Main(string[] args)
        {
            GreetInfo();
            new BabelGenerator(SetupConfiguration()).Compile(ParseArguments(args));
        }

        private static void GreetInfo()
        {
            try
            {
                AssemblyName currentAssembly = Assembly.GetExecutingAssembly().GetName();
                Console.WriteLine($"***Initialize {currentAssembly.Name}\n" +
                    $"***Current version: {currentAssembly.Version}\n" +
                    $"***Available flags: \n" +
                    $"\t[-lang] (language) it, en, fr, pt, de\n" +
                    $"\t[-settingCode] (name of your setting) eg. gridContainerFpHolding\n" +
                    $"\t[-override] replaces an existing layout with the new values\n" +
                    $"==================================================================\n\n");
            }
            catch (Exception) { }
        }

        private static ApplicationSettings SetupConfiguration()
        {
            IConfigurationBuilder builder = new ConfigurationBuilder()
                .AddJsonFile($"appsettings.json", true, true)
                .AddEnvironmentVariables();

            IConfigurationRoot config = builder.Build();


            ApplicationSettings applicationSettings = config.Get<ApplicationSettings>();
            return applicationSettings;
        }

        private static Arguments ParseArguments(string[] args)
        {
            if (args.Length == 0)
            {
                return AskForSettings();
            }
            Arguments arguments = new Arguments
            {
                Override = false
            };

            for (int i = 0; i < args.Length; i++)
            {
                string arg = args[i];
                if (arg.StartsWith("-") || arg.StartsWith("/"))
                {
                    if (i == args.Length - 1)
                    {
                        HandleOption(arguments, arg, arg);
                    }
                    else
                    {
                        HandleOption(arguments, arg, args[i + 1]);
                    }
                }
            }

            if (string.IsNullOrEmpty(arguments.SettingsCode))
            {
                arguments.SettingsCode = "gridContainerDefaultSettingsAutoGenerated";
            }

            return arguments;
        }

        private static Arguments AskForSettings()
        {
            Console.Write($"Please enter the settingCode: ");
            string settingCode = Console.ReadLine();
            Console.WriteLine();
            Console.Write($"Please enter the language (it, en, de, fr, pt): ");
            string language = Console.ReadLine();
            Console.WriteLine();
            bool parseRes = Enum.TryParse(language, out LanguageEnum langEnum);
            if (!parseRes)
            {
                langEnum = LanguageEnum.it;
            }
            Console.Write($"Override existing layout setting?(y/n): ");
            ConsoleKeyInfo overwrite = Console.ReadKey();
            string overwriteVal = string.Empty;
            if (string.IsNullOrEmpty(overwrite.KeyChar.ToString()))
            {
                overwriteVal = "n";
            }
            Console.WriteLine();
            return new Arguments()
            {
                SettingsCode = !string.IsNullOrEmpty(settingCode) ? settingCode : "gridContainerDefaultSettingsAutoGenerated",
                Language = langEnum,
                Override = overwriteVal.Equals("y")
            };
        }

        private static void HandleOption(Arguments arguments, string arg, string value)
        {
            if (arg.Equals("-lang") || arg.Equals("/lang"))
            {
                Enum.TryParse(value, out LanguageEnum languageEnum);
                arguments.Language = languageEnum;
            }
            else if (arg.Equals("-settingCode") || arg.Equals("/settingCode"))
            {
                arguments.SettingsCode = value;
            }
            else if (arg.Equals("-override") || arg.Equals("/override"))
            {
                arguments.Override = true;
            }
        }

    }

}
